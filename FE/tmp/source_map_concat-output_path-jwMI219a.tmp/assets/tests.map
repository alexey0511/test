{"version":3,"sources":["groom-clients-ember/tests/app.jshint.js","groom-clients-ember/tests/authenticators/oauth2.jshint.js","groom-clients-ember/tests/helpers/boolean-or.jshint.js","groom-clients-ember/tests/helpers/destroy-app.js","groom-clients-ember/tests/helpers/destroy-app.jshint.js","groom-clients-ember/tests/helpers/ember-simple-auth.js","groom-clients-ember/tests/helpers/module-for-acceptance.js","groom-clients-ember/tests/helpers/module-for-acceptance.jshint.js","groom-clients-ember/tests/helpers/resolver.js","groom-clients-ember/tests/helpers/resolver.jshint.js","groom-clients-ember/tests/helpers/start-app.js","groom-clients-ember/tests/helpers/start-app.jshint.js","groom-clients-ember/tests/initializers/message-service.jshint.js","groom-clients-ember/tests/integration/pods/components/file-upload/component-test.js","groom-clients-ember/tests/integration/pods/components/file-upload/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/manage-client-form/component-test.js","groom-clients-ember/tests/integration/pods/components/manage-client-form/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/manage-items/component-test.js","groom-clients-ember/tests/integration/pods/components/manage-items/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/manage-items-row/component-test.js","groom-clients-ember/tests/integration/pods/components/manage-items-row/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/manage-user-form/component-test.js","groom-clients-ember/tests/integration/pods/components/manage-user-form/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/new-client-form-component/component-test.js","groom-clients-ember/tests/integration/pods/components/new-client-form-component/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/product/manage-product-form/component-test.js","groom-clients-ember/tests/integration/pods/components/product/manage-product-form/component-test.jshint.js","groom-clients-ember/tests/integration/pods/components/ui-form/component-test.js","groom-clients-ember/tests/integration/pods/components/ui-form/component-test.jshint.js","groom-clients-ember/tests/mixins/manage-items-base.jshint.js","groom-clients-ember/tests/pods/application/adapter.jshint.js","groom-clients-ember/tests/pods/application/controller.jshint.js","groom-clients-ember/tests/pods/application/route.jshint.js","groom-clients-ember/tests/pods/application/serializer.jshint.js","groom-clients-ember/tests/pods/client/client-list-row-component/component.jshint.js","groom-clients-ember/tests/pods/client/controller.jshint.js","groom-clients-ember/tests/pods/client/item/controller.jshint.js","groom-clients-ember/tests/pods/client/item/manage-client-form/component.jshint.js","groom-clients-ember/tests/pods/client/item/route.jshint.js","groom-clients-ember/tests/pods/client/model.jshint.js","groom-clients-ember/tests/pods/client/new/controller.jshint.js","groom-clients-ember/tests/pods/client/new/new-client-form-component/component.jshint.js","groom-clients-ember/tests/pods/client/new/route.jshint.js","groom-clients-ember/tests/pods/client/route.jshint.js","groom-clients-ember/tests/pods/components/file-upload/component.jshint.js","groom-clients-ember/tests/pods/components/manage-items/component.jshint.js","groom-clients-ember/tests/pods/components/manage-items-row/component.jshint.js","groom-clients-ember/tests/pods/components/ui-form/component.jshint.js","groom-clients-ember/tests/pods/haircut/model.jshint.js","groom-clients-ember/tests/pods/haircut/route.jshint.js","groom-clients-ember/tests/pods/login/controller.jshint.js","groom-clients-ember/tests/pods/login/route.jshint.js","groom-clients-ember/tests/pods/message-service/service.jshint.js","groom-clients-ember/tests/pods/product/manage-product-form/component.jshint.js","groom-clients-ember/tests/pods/product/model.jshint.js","groom-clients-ember/tests/pods/product/route.jshint.js","groom-clients-ember/tests/pods/protected/route.jshint.js","groom-clients-ember/tests/pods/sale/model.jshint.js","groom-clients-ember/tests/pods/salon/model.jshint.js","groom-clients-ember/tests/pods/staff/manage-staff-form/component.jshint.js","groom-clients-ember/tests/pods/staff/model.jshint.js","groom-clients-ember/tests/pods/staff/route.jshint.js","groom-clients-ember/tests/pods/user/manage-user-form/component.jshint.js","groom-clients-ember/tests/pods/user/model.jshint.js","groom-clients-ember/tests/pods/user/route.jshint.js","groom-clients-ember/tests/resolver.jshint.js","groom-clients-ember/tests/router.jshint.js","groom-clients-ember/tests/test-helper.js","groom-clients-ember/tests/test-helper.jshint.js","groom-clients-ember/tests/unit/helpers/boolean-or-test.js","groom-clients-ember/tests/unit/helpers/boolean-or-test.jshint.js","groom-clients-ember/tests/unit/initializers/message-service-test.js","groom-clients-ember/tests/unit/initializers/message-service-test.jshint.js","groom-clients-ember/tests/unit/mixins/manage-items-base-test.js","groom-clients-ember/tests/unit/mixins/manage-items-base-test.jshint.js","groom-clients-ember/tests/unit/pods/application/adapter-test.js","groom-clients-ember/tests/unit/pods/application/adapter-test.jshint.js","groom-clients-ember/tests/unit/pods/application/route-test.js","groom-clients-ember/tests/unit/pods/application/route-test.jshint.js","groom-clients-ember/tests/unit/pods/application/serializer-test.js","groom-clients-ember/tests/unit/pods/application/serializer-test.jshint.js","groom-clients-ember/tests/unit/pods/barber/model-test.js","groom-clients-ember/tests/unit/pods/barber/model-test.jshint.js","groom-clients-ember/tests/unit/pods/client/item/route-test.js","groom-clients-ember/tests/unit/pods/client/item/route-test.jshint.js","groom-clients-ember/tests/unit/pods/client/model-test.js","groom-clients-ember/tests/unit/pods/client/model-test.jshint.js","groom-clients-ember/tests/unit/pods/client/route-test.js","groom-clients-ember/tests/unit/pods/client/route-test.jshint.js","groom-clients-ember/tests/unit/pods/haircut/model-test.js","groom-clients-ember/tests/unit/pods/haircut/model-test.jshint.js","groom-clients-ember/tests/unit/pods/haircut/route-test.js","groom-clients-ember/tests/unit/pods/haircut/route-test.jshint.js","groom-clients-ember/tests/unit/pods/login/route-test.js","groom-clients-ember/tests/unit/pods/login/route-test.jshint.js","groom-clients-ember/tests/unit/pods/message-service/service-test.js","groom-clients-ember/tests/unit/pods/message-service/service-test.jshint.js","groom-clients-ember/tests/unit/pods/product/model-test.js","groom-clients-ember/tests/unit/pods/product/model-test.jshint.js","groom-clients-ember/tests/unit/pods/product/route-test.js","groom-clients-ember/tests/unit/pods/product/route-test.jshint.js","groom-clients-ember/tests/unit/pods/protected/route-test.js","groom-clients-ember/tests/unit/pods/protected/route-test.jshint.js","groom-clients-ember/tests/unit/pods/sale/model-test.js","groom-clients-ember/tests/unit/pods/sale/model-test.jshint.js","groom-clients-ember/tests/unit/pods/store/model-test.js","groom-clients-ember/tests/unit/pods/store/model-test.jshint.js","groom-clients-ember/tests/unit/pods/user/model-test.js","groom-clients-ember/tests/unit/pods/user/model-test.jshint.js","groom-clients-ember/tests/unit/pods/user/route-test.js","groom-clients-ember/tests/unit/pods/user/route-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('groom-clients-ember/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/authenticators/oauth2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - authenticators');\n  QUnit.test('authenticators/oauth2.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/helpers/boolean-or.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/boolean-or.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/boolean-or.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('groom-clients-ember/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('groom-clients-ember/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'groom-clients-ember/tests/helpers/start-app', 'groom-clients-ember/tests/helpers/destroy-app'], function (exports, _qunit, _groomClientsEmberTestsHelpersStartApp, _groomClientsEmberTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _groomClientsEmberTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _groomClientsEmberTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('groom-clients-ember/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/helpers/resolver', ['exports', 'groom-clients-ember/resolver', 'groom-clients-ember/config/environment'], function (exports, _groomClientsEmberResolver, _groomClientsEmberConfigEnvironment) {\n\n  var resolver = _groomClientsEmberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _groomClientsEmberConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _groomClientsEmberConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('groom-clients-ember/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/helpers/start-app', ['exports', 'ember', 'groom-clients-ember/app', 'groom-clients-ember/config/environment'], function (exports, _ember, _groomClientsEmberApp, _groomClientsEmberConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _groomClientsEmberConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _groomClientsEmberApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('groom-clients-ember/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/initializers/message-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - initializers');\n  QUnit.test('initializers/message-service.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/message-service.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/file-upload/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('file-upload', 'Integration | Component | file upload', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'file-upload', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'file-upload', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/file-upload/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/file-upload');\n  QUnit.test('integration/pods/components/file-upload/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/file-upload/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-client-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('manage-client-form', 'Integration | Component | manage client form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'manage-client-form', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'manage-client-form', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-client-form/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/manage-client-form');\n  QUnit.test('integration/pods/components/manage-client-form/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/manage-client-form/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-items/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('manage-items', 'Integration | Component | manage items', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'manage-items', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'manage-items', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-items/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/manage-items');\n  QUnit.test('integration/pods/components/manage-items/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/manage-items/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-items-row/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('manage-items-row', 'Integration | Component | manage items row', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'manage-items-row', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'manage-items-row', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-items-row/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/manage-items-row');\n  QUnit.test('integration/pods/components/manage-items-row/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/manage-items-row/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-user-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('manage-user-form', 'Integration | Component | manage user form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'manage-user-form', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'manage-user-form', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/manage-user-form/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/manage-user-form');\n  QUnit.test('integration/pods/components/manage-user-form/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/manage-user-form/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/new-client-form-component/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('new-client-form-component', 'Integration | Component | new client form component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 29\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'new-client-form-component', ['loc', [null, [1, 0], [1, 29]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'new-client-form-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/new-client-form-component/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/new-client-form-component');\n  QUnit.test('integration/pods/components/new-client-form-component/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/new-client-form-component/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/product/manage-product-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product/manage-product-form', 'Integration | Component | product/manage product form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 31\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'product/manage-product-form', ['loc', [null, [1, 0], [1, 31]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'product/manage-product-form', [], [], 0, null, ['loc', [null, [2, 4], [4, 36]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/product/manage-product-form/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/product/manage-product-form');\n  QUnit.test('integration/pods/components/product/manage-product-form/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product/manage-product-form/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/ui-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ui-form', 'Integration | Component | ui form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'ui-form', ['loc', [null, [1, 0], [1, 11]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'ui-form', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('groom-clients-ember/tests/integration/pods/components/ui-form/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/ui-form');\n  QUnit.test('integration/pods/components/ui-form/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/ui-form/component-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/mixins/manage-items-base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins');\n  QUnit.test('mixins/manage-items-base.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/manage-items-base.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/application/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/application');\n  QUnit.test('pods/application/adapter.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/adapter.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/application/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/application');\n  QUnit.test('pods/application/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/controller.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/application');\n  QUnit.test('pods/application/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/application/serializer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/application');\n  QUnit.test('pods/application/serializer.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/serializer.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/client-list-row-component/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/client-list-row-component');\n  QUnit.test('pods/client/client-list-row-component/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/client-list-row-component/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client');\n  QUnit.test('pods/client/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/controller.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/item/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/item');\n  QUnit.test('pods/client/item/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/item/controller.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/item/manage-client-form/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/item/manage-client-form');\n  QUnit.test('pods/client/item/manage-client-form/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/item/manage-client-form/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/item/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/item');\n  QUnit.test('pods/client/item/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/item/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client');\n  QUnit.test('pods/client/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/new/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/new');\n  QUnit.test('pods/client/new/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/new/controller.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/new/new-client-form-component/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/new/new-client-form-component');\n  QUnit.test('pods/client/new/new-client-form-component/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/new/new-client-form-component/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client/new');\n  QUnit.test('pods/client/new/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/new/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/client/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/client');\n  QUnit.test('pods/client/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/client/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/components/file-upload/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/file-upload');\n  QUnit.test('pods/components/file-upload/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/file-upload/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/components/manage-items/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/manage-items');\n  QUnit.test('pods/components/manage-items/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/manage-items/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/components/manage-items-row/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/manage-items-row');\n  QUnit.test('pods/components/manage-items-row/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/manage-items-row/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/components/ui-form/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/ui-form');\n  QUnit.test('pods/components/ui-form/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/ui-form/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/haircut/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/haircut');\n  QUnit.test('pods/haircut/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/haircut/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/haircut/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/haircut');\n  QUnit.test('pods/haircut/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/haircut/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/login/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/login');\n  QUnit.test('pods/login/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/login/controller.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/login/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/login');\n  QUnit.test('pods/login/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/login/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/message-service/service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/message-service');\n  QUnit.test('pods/message-service/service.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/message-service/service.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/product/manage-product-form/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/product/manage-product-form');\n  QUnit.test('pods/product/manage-product-form/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/product/manage-product-form/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/product/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/product');\n  QUnit.test('pods/product/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/product/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/product/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/product');\n  QUnit.test('pods/product/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/product/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/protected/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/protected');\n  QUnit.test('pods/protected/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/protected/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/sale/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/sale');\n  QUnit.test('pods/sale/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sale/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/salon/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/salon');\n  QUnit.test('pods/salon/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/salon/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/staff/manage-staff-form/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/staff/manage-staff-form');\n  QUnit.test('pods/staff/manage-staff-form/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/staff/manage-staff-form/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/staff/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/staff');\n  QUnit.test('pods/staff/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/staff/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/staff/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/staff');\n  QUnit.test('pods/staff/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/staff/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/user/manage-user-form/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/user/manage-user-form');\n  QUnit.test('pods/user/manage-user-form/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/user/manage-user-form/component.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/user/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/user');\n  QUnit.test('pods/user/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/user/model.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/pods/user/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/user');\n  QUnit.test('pods/user/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/user/route.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/test-helper', ['exports', 'groom-clients-ember/tests/helpers/resolver', 'ember-qunit'], function (exports, _groomClientsEmberTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_groomClientsEmberTestsHelpersResolver['default']);\n});","define('groom-clients-ember/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/helpers/boolean-or-test', ['exports', 'groom-clients-ember/helpers/boolean-or', 'qunit'], function (exports, _groomClientsEmberHelpersBooleanOr, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | boolean or');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _groomClientsEmberHelpersBooleanOr.booleanOr)(42);\n    assert.ok(result);\n  });\n});","define('groom-clients-ember/tests/unit/helpers/boolean-or-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers');\n  QUnit.test('unit/helpers/boolean-or-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/boolean-or-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/initializers/message-service-test', ['exports', 'ember', 'groom-clients-ember/initializers/message-service', 'qunit'], function (exports, _ember, _groomClientsEmberInitializersMessageService, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | message service', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _groomClientsEmberInitializersMessageService['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('groom-clients-ember/tests/unit/initializers/message-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers');\n  QUnit.test('unit/initializers/message-service-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/message-service-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/mixins/manage-items-base-test', ['exports', 'ember', 'groom-clients-ember/mixins/manage-items-base', 'qunit'], function (exports, _ember, _groomClientsEmberMixinsManageItemsBase, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | manage items base');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var ManageItemsBaseObject = _ember['default'].Object.extend(_groomClientsEmberMixinsManageItemsBase['default']);\n    var subject = ManageItemsBaseObject.create();\n    assert.ok(subject);\n  });\n});","define('groom-clients-ember/tests/unit/mixins/manage-items-base-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins');\n  QUnit.test('unit/mixins/manage-items-base-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/manage-items-base-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/application/adapter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('groom-clients-ember/tests/unit/pods/application/adapter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/application');\n  QUnit.test('unit/pods/application/adapter-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/adapter-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/application/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/application/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/application');\n  QUnit.test('unit/pods/application/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/application/serializer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('groom-clients-ember/tests/unit/pods/application/serializer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/application');\n  QUnit.test('unit/pods/application/serializer-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/serializer-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/barber/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('barber', 'Unit | Model | barber', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/barber/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/barber');\n  QUnit.test('unit/pods/barber/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/barber/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/client/item/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:client/item', 'Unit | Route | client/item', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/client/item/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/client/item');\n  QUnit.test('unit/pods/client/item/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/client/item/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/client/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('client', 'Unit | Model | client', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/client/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/client');\n  QUnit.test('unit/pods/client/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/client/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/client/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:client', 'Unit | Route | client', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/client/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/client');\n  QUnit.test('unit/pods/client/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/client/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/haircut/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('haircut', 'Unit | Model | haircut', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/haircut/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/haircut');\n  QUnit.test('unit/pods/haircut/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/haircut/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/haircut/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:haircut', 'Unit | Route | haircut', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/haircut/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/haircut');\n  QUnit.test('unit/pods/haircut/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/haircut/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/login/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/login/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/login');\n  QUnit.test('unit/pods/login/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/login/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/message-service/service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:message-service', 'Unit | Service | message service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('groom-clients-ember/tests/unit/pods/message-service/service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/message-service');\n  QUnit.test('unit/pods/message-service/service-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/message-service/service-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/product/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('product', 'Unit | Model | product', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/product/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/product');\n  QUnit.test('unit/pods/product/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/product/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/product/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:product', 'Unit | Route | product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/product/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/product');\n  QUnit.test('unit/pods/product/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/product/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/protected/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:protected', 'Unit | Route | protected', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/protected/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/protected');\n  QUnit.test('unit/pods/protected/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/protected/route-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/sale/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('sale', 'Unit | Model | sale', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/sale/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/sale');\n  QUnit.test('unit/pods/sale/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/sale/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/store/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('store', 'Unit | Model | store', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/store/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/store');\n  QUnit.test('unit/pods/store/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/store/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/user/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('groom-clients-ember/tests/unit/pods/user/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/user');\n  QUnit.test('unit/pods/user/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/user/model-test.js should pass jshint.');\n  });\n});","define('groom-clients-ember/tests/unit/pods/user/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:user', 'Unit | Route | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('groom-clients-ember/tests/unit/pods/user/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/user');\n  QUnit.test('unit/pods/user/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/user/route-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('groom-clients-ember/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}